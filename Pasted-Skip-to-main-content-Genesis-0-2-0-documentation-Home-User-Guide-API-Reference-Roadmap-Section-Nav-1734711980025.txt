Skip to main content
Genesis 0.2.0 documentation - Home
User Guide
API Reference
Roadmap
Section Navigation

Overview

üí° What is Genesis
üß¨ Why A New Physics Simulator
üõ†Ô∏è Installation
üéØ Genesis Vision & Mission
Getting Started

üëãüèª Hello, Genesis
üì∏ Visualization & Rendering
üïπÔ∏è Control Your Robot
üöÄ Parallel Simulation
ü¶æ Inverse Kinematics & Motion Planning
üßó Advanced and Parallel IK
üåä Beyond Rigid Bodies
üßë‚Äçüíª Interactive Information Access and Debugging
ü¶ø Training Locomotion Policies with RL
üêõ Soft Robots
üñ•Ô∏è Command Line Tools
Advanced Topics

üß© Concepts
üí• Collision, Contacts & Forces
ü™ê Differentiable Simulation
üé± Collision Representataions
üí† Sparse Computation
üßÆ Solvers & Coupling
üõ∏ Drone
Sponsored: MongoDB
Discover a more flexible and intuitive way to work with data.
Ad by EthicalAds   ¬∑   ‚ÑπÔ∏è
User Guide
üõ†Ô∏è Installation
üõ†Ô∏è Installation
Prerequisites
Python: 3.9+

OS: Linux (recommended) / MacOS / Windows

Note

Genesis is designed to be cross-platform, supporting backend devices including CPU, CUDA GPU and non-CUDA GPU. That said, it is recommended to use Linux platform with CUDA-compatible GPU to achieve the best performance.

Supported features on various systems are as follows:

OS

GPU Device

GPU Simulation

CPU Simulation

Interactive Viewer

Headless Rendering

Linux

Nvidia

‚úÖ

‚úÖ

‚úÖ

‚úÖ

AMD

‚úÖ

‚úÖ

‚úÖ

‚úÖ

Intel

‚úÖ

‚úÖ

‚úÖ

‚úÖ

Windows

Nvidia

‚úÖ

‚úÖ

‚ùå

‚ùå

AMD

‚úÖ

‚úÖ

‚ùå

‚ùå

Intel

‚úÖ

‚úÖ

‚ùå

‚ùå

MacOS

Apple Silicon

‚úÖ

‚úÖ

‚úÖ

‚úÖ

Installation
Genesis is available via PyPI:

pip install genesis-world
Install PyTorch following the official instructions.

(Optional) Motion planning
Genesis integrated OMPL‚Äôs motion planning functionalities and wraps it using a intuitive API for effortless motion planning. If you need the built-in motion planning capability, download pre-compiled OMPL wheel here, and then pip install it.

(Optional) Surface reconstruction
If you need fancy visuals for visualizing particle-based entities (fluids, deformables, etc.), you typically need to reconstruct the mesh surface using the internal particle-based representation. We provide two options for this purpose:

splashsurf, a state-of-the-art surface reconstruction method for achieving this:

cargo install splashsurf
ParticleMesher, our own openVDB-based surface reconstruction tool (faster but with not as smooth):

echo "export LD_LIBRARY_PATH=${PWD}/ext/ParticleMesher/ParticleMesherPy:$LD_LIBRARY_PATH" >> ~/.bashrc
source ~/.bashrc
(Optional) Ray Tracing Renderer
If you need photo-realistic visuals, Genesis has a built-in a ray-tracing (path-tracing) based renderer developped using LuisaCompute, a high-performance domain specific language designed for rendering.

1. Get LuisaRender
The submodule LuisaRender is under ext/LuisaRender:

git submodule update --init --recursive
2. Dependencies
2.A: If you have sudo access. Preferred.
NB: It seems compilation only works on Ubuntu 20.04+, As vulkan 1.2+ is needed and 18.04 only supports 1.1, but I haven‚Äôt fully checked this‚Ä¶

upgrade g++ and gcc to version 11

sudo apt install build-essential manpages-dev software-properties-common
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt update && sudo apt install gcc-11 g++-11
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 110
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110

# verify
g++ --version
gcc --version
cmake

# if you system's cmake version is under 3.18, uninstall that and reinstall via snap
sudo snap install cmake --classic
CUDA

You need to install a system-wide cuda (Now 12.0+).

download https://developer.nvidia.com/cuda-11-7-0-download-archive

Install cuda toolkit.

reboot

rust

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
sudo apt-get install patchelf
# if the above gives downloader error, make sure your curl was installed via apt, not snap
Vulkan

sudo apt install libvulkan-dev
zlib

sudo apt-get install zlib1g-dev
RandR headers

sudo apt-get install xorg-dev libglu1-mesa-dev
pybind

pip install "pybind11[global]"
libsnappy

sudo apt-get install libsnappy-dev
2.B: If you have no sudo.
conda dependencies

conda install -c conda-forge gcc=11.4 gxx=11.4 cmake=3.26.1 minizip zlib libuuid patchelf vulkan-tools vulkan-headers
rust

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
pybind

pip install "pybind11[global]"
3. Compile
Build LuisaRender and its python binding:

If you used system dependencies (2.A)

cd genesis/ext/LuisaRender
cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D PYTHON_VERSIONS=3.9 -D LUISA_COMPUTE_DOWNLOAD_NVCOMP=ON -D LUISA_COMPUTE_ENABLE_GUI=OFF 
cmake --build build -j $(nproc)
By default, we use optix deoniser. If you need OIDN, append -D LUISA_COMPUTE_DOWNLOAD_OIDN=ON.

If you used conda dependencies (2.B)

export CONDA_INCLUDE_PATH=path/to/anaconda/include
cd ./ext/LuisaRender
cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -D PYTHON_VERSIONS=3.9 -D LUISA_COMPUTE_DOWNLOAD_NVCOMP=ON -D LUISA_COMPUTE_ENABLE_GUI=OFF -D ZLIB_INCLUDE_DIR=$CONDA_INCLUDE_PATH
cmake --build build -j $(nproc)
The CONDA_INCLUDE_PATH typically looks like: /home/user/anaconda3/envs/genesis/include

4. FAQs
Assertion ‚Äòlerror‚Äô failed: Failed to write to the process: Broken pipe: You may need to use CUDA of the same version as compiled.

if you followed 2.A and see ‚ÄúGLIBCXX_3.4.30 not found‚Äù

cd ~/anaconda3/envs/genesis/lib
mv libstdc++.so.6 libstdc++.so.6.old
ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 libstdc++.so.6
previous

üß¨ Why A New Physics Simulator

next

üéØ Genesis Vision & Mission

 On this page
Prerequisites
Installation
(Optional) Motion planning
(Optional) Surface reconstruction
(Optional) Ray Tracing Renderer
 Edit on GitHub
This Page
Show Source
¬© Copyright 2024, Genesis Developers.

Created using Sphinx 6.2.1.

Built with the PyData Sphinx Theme 0.16.1.

Read the Docs
 latest